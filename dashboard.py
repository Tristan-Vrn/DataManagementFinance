import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import sqlite3
from metrics import PortfolioMetrics
from strategies import Strategies
import numpy as np
import matplotlib.ticker as mtick
from datetime import datetime, timedelta
from io import StringIO  # Ajout de l'import manquant

# Configuration de la page Streamlit
st.set_page_config(
    page_title="Dashboard de Performance - Portefeuilles",
    page_icon="üìà",
    layout="wide"
)

# Titre et introduction
st.title("Dashboard de Performance des Portefeuilles")


# Fonction pour r√©cup√©rer la liste des strat√©gies disponibles
def get_available_strategies(db_file="fund.db"):
    with sqlite3.connect(db_file) as conn:
        df = pd.read_sql_query(
            "SELECT DISTINCT type FROM Portfolios WHERE produits IS NOT NULL", 
            conn)
    return df['type'].tolist()

# R√©cup√©ration des strat√©gies disponibles
strategies = get_available_strategies()

# S√©lection de la strat√©gie
col1, col2 = st.columns([1, 2])
with col1:
    selected_strategy = st.selectbox(
        "S√©lectionnez une strat√©gie",
        options=strategies,
        index=0
    )
    
    # S√©lection de la p√©riode d'analyse
    st.subheader("P√©riode d'analyse")
    
    # R√©cup√©ration des dates disponibles pour la strat√©gie s√©lectionn√©e
    @st.cache_data
    def get_strategy_dates(strategy, db_file="fund.db"):
        metrics = PortfolioMetrics(strategy, db_file)
        returns = metrics.returns()
        return returns['date'].min(), returns['date'].max()
    
    min_date, max_date = get_strategy_dates(selected_strategy)
    
    start_date = st.date_input(
        "Date de d√©but",
        value=min_date,
        min_value=min_date,
        max_value=max_date
    )
    
    end_date = st.date_input(
        "Date de fin",
        value=max_date,
        min_value=min_date,
        max_value=max_date
    )
    
    # M√©triques √† afficher
    st.subheader("M√©triques")
    metrics_selection = st.multiselect(
        "S√©lectionnez les m√©triques √† afficher",
        options=["Rendement moyen", "Rendement total", "Volatilit√©", "Ratio de Sharpe", "Drawdown maximum"],
        default=["Rendement total", "Volatilit√©", "Ratio de Sharpe"]
    )


with col2:
    metrics = PortfolioMetrics(selected_strategy)
    
    # Affichage des m√©triques s√©lectionn√©es
    metrics_data = {}
    if "Rendement moyen" in metrics_selection:
        metrics_data["Rendement moyen"] = f"{metrics.mean_return() * 100:.2f}%"
    if "Rendement total" in metrics_selection:
        metrics_data["Rendement total"] = f"{metrics.total_return() * 100:.2f}%"
    if "Volatilit√©" in metrics_selection:
        metrics_data["Volatilit√©"] = f"{metrics.volatility() * 100:.2f}%"
    if "Ratio de Sharpe" in metrics_selection:
        metrics_data["Ratio de Sharpe"] = f"{metrics.sharpe_ratio():.2f}"
    if "Drawdown maximum" in metrics_selection:
        metrics_data["Drawdown maximum"] = f"{metrics.max_drawdown() * 100:.2f}%"
    
    # Affichage des m√©triques en cards
    metrics_cols = st.columns(len(metrics_data))
    for i, (metric_name, metric_value) in enumerate(metrics_data.items()):
        with metrics_cols[i]:
            st.metric(metric_name, metric_value)

# Visualisation des rendements cumul√©s
st.header("Rendements cumul√©s")
fig_returns = metrics.plot(plot_type='return', start_date=start_date, end_date=end_date)
st.pyplot(fig_returns)

# Visualisation de la volatilit√©
st.header("Drawdown")
fig_drawdown = metrics.plot(plot_type='drawdown', start_date=start_date, end_date=end_date)
st.pyplot(fig_drawdown)

# Comparaison des strat√©gies
st.header("Comparaison des strat√©gies")
compare = st.checkbox("Comparer avec d'autres strat√©gies")

if compare:
    strategies_to_compare = st.multiselect(
        "S√©lectionnez les strat√©gies √† comparer",
        options=[s for s in strategies if s != selected_strategy],
        default=[]
    )
    
    if strategies_to_compare:
        # Pr√©paration des donn√©es pour la comparaison
        plt.figure(figsize=(12, 6))
        
        # Trac√© de la strat√©gie principale
        main_metrics = PortfolioMetrics(selected_strategy)
        main_returns = main_metrics.returns()
        main_returns = main_returns[(main_returns['date'] >= pd.to_datetime(start_date)) & 
                                   (main_returns['date'] <= pd.to_datetime(end_date))]
        main_cumulative = (1 + main_returns['return']).cumprod() - 1
        plt.plot(main_returns['date'], main_cumulative, label=selected_strategy)
        
        # Trac√© des strat√©gies √† comparer
        for strategy in strategies_to_compare:
            comp_metrics = PortfolioMetrics(strategy)
            comp_returns = comp_metrics.returns()
            comp_returns = comp_returns[(comp_returns['date'] >= pd.to_datetime(start_date)) & 
                                       (comp_returns['date'] <= pd.to_datetime(end_date))]
            comp_cumulative = (1 + comp_returns['return']).cumprod() - 1
            plt.plot(comp_returns['date'], comp_cumulative, label=strategy)
        
        plt.title("Comparaison des rendements cumul√©s")
        plt.ylabel("Rendement cumul√©")
        plt.gca().yaxis.set_major_formatter(mtick.PercentFormatter(1.0))
        plt.grid(alpha=0.3)
        plt.legend()
        plt.tight_layout()
        
        st.pyplot(plt.gcf())
        
        # Tableau de comparaison des m√©triques
        comparison_data = []
        
        # M√©triques pour la strat√©gie principale
        main_data = {
            "Strat√©gie": selected_strategy,
            "Rendement moyen": f"{main_metrics.mean_return() * 100:.2f}%",
            "Rendement total": f"{main_metrics.total_return() * 100:.2f}%",
            "Volatilit√©": f"{main_metrics.volatility() * 100:.2f}%",
            "Ratio de Sharpe": f"{main_metrics.sharpe_ratio():.2f}",
            "Drawdown maximum": f"{main_metrics.max_drawdown() * 100:.2f}%"
        }
        comparison_data.append(main_data)
        
        # M√©triques pour les strat√©gies √† comparer
        for strategy in strategies_to_compare:
            comp_metrics = PortfolioMetrics(strategy)
            comp_data = {
                "Strat√©gie": strategy,
                "Rendement moyen": f"{comp_metrics.mean_return() * 100:.2f}%",
                "Rendement total": f"{comp_metrics.total_return() * 100:.2f}%",
                "Volatilit√©": f"{comp_metrics.volatility() * 100:.2f}%",
                "Ratio de Sharpe": f"{comp_metrics.sharpe_ratio():.2f}",
                "Drawdown maximum": f"{comp_metrics.max_drawdown() * 100:.2f}%"
            }
            comparison_data.append(comp_data)
        
        st.dataframe(pd.DataFrame(comparison_data).set_index("Strat√©gie"))

# Informations d√©taill√©es sur la strat√©gie
st.header(f"D√©tails de la strat√©gie : {selected_strategy}")

if selected_strategy == "low_risk":
    st.markdown("""
    **Strat√©gie Low Risk**
    
    Cette strat√©gie vise √† minimiser la volatilit√© du portefeuille √† 10% par an avec les contraintes suivantes:
    - La somme des poids doit √™tre √©gale √† 1
    - La somme des poids attribu√©s aux actifs de la cat√©gorie "bond" doit √™tre >= 0.6
    - La vente √† d√©couvert est interdite
    """)
elif selected_strategy == "low_turnover":
    st.markdown("""
    **Strat√©gie Low Turnover**
    
    Cette strat√©gie utilise un mod√®le de r√©gression lin√©aire pour pr√©dire le rendement suivant de chaque actif.
    Les parts des actifs sont normalis√©es (rendement/|somme des rendements|).
    La vente √† d√©couvert est autoris√©e dans cette strat√©gie.
    """)
elif selected_strategy == "high_yield_equity_only":
    st.markdown("""
    **Strat√©gie High Yield Equity Only**
    
    Cette strat√©gie vise √† maximiser le rendement moyen sur les deux derni√®res semaines avec les contraintes suivantes:
    - La somme des poids doit √™tre √©gale √† 1
    - La vente √† d√©couvert est autoris√©e
    - Seuls les actifs de la cat√©gorie "equity" sont consid√©r√©s
    """)

# Section pour examiner les transactions (deals)
st.header("Transactions r√©centes")

@st.cache_data
def get_deals(db_file="fund.db"):
    with sqlite3.connect(db_file) as conn:
        query = f"""
        SELECT date, "{selected_strategy}" as deals
        FROM Deals
        WHERE "{selected_strategy}" IS NOT NULL
        ORDER BY date DESC
        LIMIT 5
        """
        deals = pd.read_sql_query(query, conn)
    return deals

deals = get_deals()
if not deals.empty:
    for _, deal in deals.iterrows():
        with st.expander(f"Transaction du {deal['date']}"):
            try:
                deals_json = deal['deals']
                if deals_json:
                    deals_data = pd.read_json(StringIO(deals_json), orient='index')
                    st.dataframe(deals_data)
                else:
                    st.write("Aucune donn√©e disponible pour cette transaction.")
            except:
                st.write("Erreur lors du traitement des donn√©es de cette transaction.")
else:
    st.write("Aucune transaction r√©cente trouv√©e pour cette strat√©gie.")




